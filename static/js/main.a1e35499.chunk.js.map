{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","src_0","Component","Boolean","window","location","hostname","match","Blk","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","_this2","onClick","setState","React","BtmBlk","Bg","_this3","blks","Array","fill","i","src_Blk","src_BtmBlk","renderBlk","renderBtm","Idx","src_Bg","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qKCmBzBC,qMAZX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACxBH,EAAAC,EAAAC,cAACE,EAAD,eALgBC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+DCTAC,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAChBC,MAAOR,EAAKD,MAAMS,OAHGR,wEAMT,IAAAS,EAAAN,KAEb,OACChB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMoB,QAAS,kBAAMD,EAAKE,SAAS,CAACH,MAAO,QACxDL,KAAKI,MAAMC,cAXAI,IAAMpB,WAmBlBqB,mLAEL,OAAQ1B,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAlB,yBAFYsB,IAAMpB,WAUrBsB,cACD,SAAAA,EAAYf,GAAO,IAAAgB,EAAA,OAAAd,OAAAC,EAAA,EAAAD,CAAAE,KAAAW,IACpBC,EAAAd,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAa,GAAAR,KAAAH,KAAMJ,KACDQ,MAAQ,CACXS,KAAMC,MAAM,GAAGC,KAAK,OAHFH,yEAMVI,GACb,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,CAAKZ,MAAOW,sCAENA,GACb,OAAOhC,EAAAC,EAAAC,cAACgC,EAAD,CAAQb,MAAOW,qCAInB,OACEhC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZa,KAAKmB,UAAU,QACfnB,KAAKmB,UAAU,aAElBnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZa,KAAKmB,UAAU,GACfnB,KAAKmB,UAAU,IAElBnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZa,KAAKmB,UAAU,GACfnB,KAAKmB,UAAU,IAEzBnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACLa,KAAKoB,UAAU,YA9BTX,IAAMpB,WAqCjBgC,mLAEA,OACCrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAEdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAACoC,EAAD,eANQb,IAAMpB,WAaTgC,cAIfE,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SDqC3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a1e35499.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Idx from './index'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n\t <Idx />\n\n        </header>\n\n\t </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n// Render Blocks\n\nclass Blk extends React.Component {\n    constructor(props) {\n\t    super(props);\n\t    this.state = {\n\t\tvalue: this.props.value,\n\t    };\n\t}\n    render () {\n\t\n\treturn (\n\t\t<button className=\"blk\" onClick={() => this.setState({value: 'X'})}>\n\t\t    {this.state.value}\n\t</button>\n\t);\n    }\n}\n\n//Render Bottom Block\n\nclass BtmBlk extends React.Component {\n    render () {\n\treturn (<button className=\"btmblk\">\n\t\tEmail / Github\n\t\t</button>);\n    }\n}\n\n// Render Background\n\nclass Bg extends React.Component {\n     constructor(props) {\n    super(props);\n    this.state = {\n      blks: Array(8).fill(null),\n    };\n  }\n    renderBlk(i) {\n\treturn <Blk value={i} />;\n    }\n    renderBtm(i){\n\treturn <BtmBlk value={i} />;\n    }\n     render() {\n    const status = 'Next player: X';\n    return (\n      <div>\n        <div className=\"row\">\n          {this.renderBlk(\"Chek\")}\n          {this.renderBlk(\"About Me\")}\n        </div>\n        <div className=\"row\">\n          {this.renderBlk(2)}\n          {this.renderBlk(3)}\n        </div>\n        <div className=\"row\">\n          {this.renderBlk(4)}\n          {this.renderBlk(5)}\n        </div>\n\t<div className=\"row\">\n          {this.renderBtm(6)}\n        </div>\n      </div>\n    );\n    }\n}\n\nclass Idx extends React.Component {\n  render() {\n      return (\n\t      <div className=\"idxPage\">\n\t       \n        <div className=\"Bg\">\n          <Bg />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Idx;\n\n// ====================================================\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}